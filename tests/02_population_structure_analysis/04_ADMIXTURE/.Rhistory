# LIBRARIES ####
library(tidyverse)
# INPUTS ####
# 1. Define your working directory:
setwd("~/Documents/Ferreira_SU/Repositories/EvolGenomics2025/summary_stats/")
read.table("results/wFst.out", header = F)
wFst <- read.table("results/wFst.out", header = F)
colnames(wFst) <- c("contrast", "Fst")
meanFst <- read.table("results/meanFst.out", header = F)
colnames(wFst) <- c("contrast", "wFst")
colnames(meanFst) <- c("contrast", "meanFst")
head(meanFst)
merge(meanFst, wFst, by="contrast")
Fst_tbl <- merge(meanFst, wFst, by="contrast")
ggplot(Fst_tbl) +
geom_point(aes(x=contrast, y=meanFst))
str_split_fixed(Fst_tbl$contrast, "_vs_", 2)
str_split_fixed(Fst_tbl$contrast, "_vs_", 1)
str_split(Fst_tbl$contrast, "_vs_")
str_split_fixed(Fst_tbl$contrast, "_vs_", 2)[,1]
Fst_tbl$pop1 <- str_split_fixed(Fst_tbl$contrast, "_vs_", 2)[,1]
Fst_tbl$pop2 <- str_split_fixed(Fst_tbl$contrast, "_vs_", 2)[,2]
ggplot(Fst_tbl) +
geom_tile(aes(x=pop1, y=pop2, fill=wFst))
ggplot(Fst_tbl) +
geom_tile(aes(x=pop1, y=pop2, fill=wFst))+
geom_text(aes(x=pop1, y=pop2, label=wFst))
ggplot(Fst_tbl) +
geom_tile(aes(x=pop1, y=pop2, fill=wFst))+
geom_text(aes(x=pop1, y=pop2, label=wFst), color="white")
ggplot(Fst_tbl) +
geom_tile(aes(x=pop1, y=pop2, fill=meanFst))+
geom_text(aes(x=pop1, y=pop2, label=meanFst), color="white")
# let's plot the Fst values as a heatmap
ggplot(Fst_tbl) +
geom_tile(aes(x=pop2, y=pop1, fill=wFst))+
geom_text(aes(x=pop2, y=pop1, label=wFst), color="white")
# let's plot the Fst values as a heatmap
ggplot(Fst_tbl) +
geom_tile(aes(x=pop1, y=pop2, fill=wFst))+
geom_text(aes(x=pop1, y=pop2, label=wFst), color="white")
# If we want to order the populations:
Fst_tbl$pop1 <- factor(Fst_tbl$pop1, levels=c("IND", "GER", "FRA"))
Fst_tbl$pop2 <- factor(Fst_tbl$pop1, levels=c("IND", "GER", "HEL"))
# let's plot the Fst values as a heatmap
ggplot(Fst_tbl) +
geom_tile(aes(x=pop1, y=pop2, fill=wFst))+
geom_text(aes(x=pop1, y=pop2, label=wFst), color="white")
ggplot(Fst_tbl) +
geom_tile(aes(x=pop1, y=pop2, fill=meanFst))+
geom_text(aes(x=pop1, y=pop2, label=meanFst), color="white")
Fst_tbl$pop2
# Let's create two columns containing the names of pop1 and pop2
Fst_tbl$pop1 <- str_split_fixed(Fst_tbl$contrast, "_vs_", 2)[,1]
Fst_tbl$pop2 <- str_split_fixed(Fst_tbl$contrast, "_vs_", 2)[,2]
Fst_tbl$pop2
# If we want to order the populations:
Fst_tbl$pop1 <- factor(Fst_tbl$pop1, levels=c("IND", "GER", "FRA"))
Fst_tbl$pop2 <- factor(Fst_tbl$pop2, levels=c("IND", "GER", "HEL"))
# let's plot the Fst values as a heatmap
ggplot(Fst_tbl) +
geom_tile(aes(x=pop1, y=pop2, fill=wFst))+
geom_text(aes(x=pop1, y=pop2, label=wFst), color="white")
ggplot(Fst_tbl) +
geom_tile(aes(x=pop1, y=pop2, fill=meanFst))+
geom_text(aes(x=pop1, y=pop2, label=meanFst), color="white")
Fst_tbl
as.matrix(Fst_tbl)
as.matrix(Fst_tbl$wFst)
as.matrix(Fst_tbl$pop1)
# Let's combine both values into one single table
Fst_tbl <- merge(meanFst, wFst, by="contrast")
# Let's create two columns containing the names of pop1 and pop2
Fst_tbl$pop1 <- str_split_fixed(Fst_tbl$contrast, "_vs_", 2)[,1]
Fst_tbl$pop2 <- str_split_fixed(Fst_tbl$contrast, "_vs_", 2)[,2]
# let's plot the Fst values as a heatmap
ggplot(Fst_tbl) +
geom_tile(aes(x=pop1, y=pop2, fill=wFst))+
geom_text(aes(x=pop1, y=pop2, label=wFst), color="white")
ggplot(Fst_tbl) +
geom_tile(aes(x=pop1, y=pop2, fill=meanFst))+
geom_text(aes(x=pop1, y=pop2, label=meanFst), color="white")
read.table("results/heterozygosity.out.het", header=T)
het_tbl <- read.table("results/heterozygosity.out.het", header=T)
ggplot(het_tbl) +
geom_boxplot(aes(x=F))
ggplot(het_tbl) +
geom_boxplot(aes(x=y))
ggplot(het_tbl) +
geom_boxplot(aes(y=F))
# here, it will be nice to have metadata information added to the table
# so that we can plot the results by population.
metadata <- read.table("metadata/sample_metadata.txt", header=T)
head(metadata)
head(het_tbl)
merge(het_tbl, metadata, by.x="INDV", by.y="sample_id")
het_tbl_metadata <- merge(het_tbl, metadata, by.x="INDV", by.y="sample_id")
ggplot(het_tbl) +
geom_boxplot(aes(y=F, x=population_cod))
ggplot(het_tbl) +
geom_boxplot(aes(y=F, x=population_code))
ggplot(het_tbl_metadata) +
geom_boxplot(aes(y=F, x=population_code))
head(het_tbl_metadata)
ggplot(het_tbl_metadata) +
geom_boxplot(aes(y=O.HOM., x=population_code))
ggplot(het_tbl_metadata) +
geom_boxplot(aes(y=O.HOM./N_SITES, x=population_code))
# LIBRARIES ####
library(tidyverse)
# INPUTS ####
# 1. Define your working directory:
setwd("~/Documents/Ferreira_SU/Repositories/EvolGenomics2025/summary_stats/")
read.table("results/FRA_vs_GER_10kbW5kbstep_chr1.windowed.weir.fst", header = T)
windowFst <- read.table("results/FRA_vs_GER_10kbW5kbstep_chr1.windowed.weir.fst", header = T)
windowFst_chr1 <- read.table("results/FRA_vs_GER_10kbW5kbstep_chr1.windowed.weir.fst", header = T)
windowFst_chr7 <- read.table("results/FRA_vs_GER_10kbW5kbstep_chr7.windowed.weir.fst", header = T)
geom_line(aes(x=BIN_START, y=WEIGHTED_FST)
ggplot(windowFst_chr7) +
geom_line(aes(x=BIN_START, y=WEIGHTED_FST))
ggplot(windowFst_chr7) +
geom_line(aes(x=BIN_START, y=WEIGHTED_FST))+
xlim(127492235 - 5e5, 127494789 + 5e5)
ggplot(windowFst_chr7) +
geom_line(aes(x=BIN_START, y=WEIGHTED_FST))+
xlim(127492235 - 1e6, 127494789 + 1e6)+
ggplot(windowFst_chr7) +
geom_line(aes(x=BIN_START, y=WEIGHTED_FST))+
xlim(127492235 - 1e6, 127494789 + 1e6)
ggplot(windowFst_chr7) +
geom_line(aes(x=BIN_START, y=WEIGHTED_FST))+
xlim(127492235 - 1e6, 127494789 + 1e6)
ggplot(windowFst_chr7) +
geom_line(aes(x=BIN_START, y=WEIGHTED_FST))+
xlim(127492235 - 1e6, 127494789 + 1e6)+
geom_vline(xintercept = 127492235, color="red")+
geom_vline(xintercept = 127494789, color="red")
ggplot(windowFst_chr7) +
geom_line(aes(x=BIN_START, y=WEIGHTED_FST))+
xlim(127492235 - 5e5, 127494789 + 5e5)+
geom_vline(xintercept = 127492235, color="red")+
geom_vline(xintercept = 127494789, color="red")
ggplot(windowFst_chr7) +
geom_line(aes(x=BIN_START, y=WEIGHTED_FST))+
xlim(127492235 - 5e4, 127494789 + 5e4)+
geom_vline(xintercept = 127492235, color="red")+
geom_vline(xintercept = 127494789, color="red")
ggplot(windowFst_chr7) +
geom_line(aes(x=BIN_START, y=WEIGHTED_FST))+
xlim(127492235 - 5e5, 127494789 + 5e5)+
geom_vline(xintercept = 127492235, color="red")+
geom_vline(xintercept = 127494789, color="red")
# Windowed pi:
read.table(file = "results/FRA_pi_10kbW5Kbstep_chr7.windowed.pi", header=T)
# Windowed pi:
FRA_pi <- read.table(file = "results/FRA_pi_10kbW5Kbstep_chr7.windowed.pi", header=T)
GER_pi <- read.table(file = "results/GER_pi_10kbW5Kbstep_chr7.windowed.pi", header=T)
head(FRA_pi)
ggplot(FRA_pi) +
geom_line(aes(x=BIN_START, y=PI))+
xlim(127492235 - 5e5, 127494789 + 5e5)+
geom_vline(xintercept = 127492235, color="red")+
geom_vline(xintercept = 127494789, color="red")
ggplot(FRA_pi) +
geom_line(aes(x=BIN_START, y=PI))+
xlim(127492235 - 2e5, 127494789 + 2e5)+
geom_vline(xintercept = 127492235, color="red")+
geom_vline(xintercept = 127494789, color="red")
GER_pi <- read.table(file = "results/GER_pi_10kbW5Kbstep_chr7.windowed.pi", header=T)
ggplot(GER_pi) +
geom_line(aes(x=BIN_START, y=PI))+
xlim(127492235 - 2e5, 127494789 + 2e5)+
geom_vline(xintercept = 127492235, color="red")+
geom_vline(xintercept = 127494789, color="red")
quantile(GER_pi$PI, 0.05)
ggplot(GER_pi) +
geom_line(aes(x=BIN_START, y=PI))+
xlim(127492235 - 2e5, 127494789 + 2e5)+
geom_vline(xintercept = 127492235, color="red")+
geom_vline(xintercept = 127494789, color="red")+
geom_hline(yintercept = 0.000162637, color="green")
windowFst_chr7 %>%
filter(N_VARIANTS > 10)
windowFst_chr7_filter <- windowFst_chr7 %>%
filter(N_VARIANTS > 10)
?scale
windowFst_chr7_filter$Zscore <- scale(windowFst_chr7_filter$WEIGHTED_FST, center = T, scale=T)
ggplot(windowFst_chr7_filter) +
geom_line(aes(x=BIN_START, y=Zscore))+
xlim(127492235 - 5e5, 127494789 + 5e5)+
geom_vline(xintercept = 127492235, color="red")+
geom_vline(xintercept = 127494789, color="red")
ggplot(windowFst_chr7_filter) +
geom_line(aes(x=BIN_START, y=Zscore))+
#xlim(127492235 - 5e5, 127494789 + 5e5)+
geom_vline(xintercept = 127492235, color="red")+
geom_vline(xintercept = 127494789, color="red")
ggplot(windowFst_chr7_filter) +
geom_line(aes(x=BIN_START, y=Zscore))+
xlim(127492235 - 1e6, 127494789 + 1e6)+
geom_vline(xintercept = 127492235, color="red")+
geom_vline(xintercept = 127494789, color="red")
windowFst_chr7_filter %>% filter(abs(Zscore) > 3)
head(windowFst_chr7)
windowFst_chr1 <- read.table("results/FRA_vs_GER_10kbW5kbstep_chr1.windowed.weir.fst", header = T)
ggplot(windowFst_chr1) +
geom_line(aes(x=BIN_START, y=WEIGHTED_FST))
quantile(windowFst_chr1$WEIGHTED_FST, 0.05)
quantile(windowFst_chr1$WEIGHTED_FST, 0.95)
quantile(windowFst_chr1$WEIGHTED_FST, 0.99)
windowFst_chr1 %>% filter(WEIGHTED_FST > 0.72)
windowFst_chr1 %>% filter(WEIGHTED_FST > 0.9)
windowFst_chr1 %>% filter(WEIGHTED_FST > 0.8)
windowFst_chr1 %>% filter(WEIGHTED_FST > 0.9)
# Windowed pi:
FRA_pi <- read.table(file = "results/FRA_pi_10kbW5Kbstep_chr1.windowed.pi", header=T)
GER_pi <- read.table(file = "results/GER_pi_10kbW5Kbstep_chr1.windowed.pi", header=T)
ggplot(GER_pi) +
geom_line(aes(x=BIN_START, y=PI))+
xlim(94020001 - 2e5, 94055000 + 2e5)
geom_vline(xintercept = 93966027, color="red")+
geom_vline(xintercept = 93980278, color="red")
ggplot(GER_pi) +
geom_line(aes(x=BIN_START, y=PI))+
xlim(94020001 - 2e5, 94055000 + 2e5)+
geom_vline(xintercept = 93966027, color="red")+
geom_vline(xintercept = 93980278, color="red")
ggplot(GER_pi) +
geom_line(aes(x=BIN_START, y=PI))+
xlim(94020001 - 5e5, 94055000 + 5e5)+
geom_vline(xintercept = 93966027, color="red")+
geom_vline(xintercept = 93980278, color="red")
ggplot(FRA_pi) +
geom_line(aes(x=BIN_START, y=PI))+
xlim(94020001 - 5e5, 94055000 + 5e5)+
geom_vline(xintercept = 93966027, color="red")+
geom_vline(xintercept = 93980278, color="red")
ggplot(FRA_pi) +
geom_line(aes(x=BIN_START, y=PI))+
xlim(94020001 - 1e6, 94055000 + 1e6)+
geom_vline(xintercept = 93966027, color="red")+
geom_vline(xintercept = 93980278, color="red")
ggplot(GER_pi) +
geom_line(aes(x=BIN_START, y=PI))+
xlim(94020001 - 1e6, 94055000 + 1e6)+
geom_vline(xintercept = 93966027, color="red")+
geom_vline(xintercept = 93980278, color="red")
windowFst_chr7 <- read.table("results/FRA_vs_GER_10kbW5kbstep_chr7.windowed.weir.fst", header = T)
xlim(127492235 - 5e5, 127494789 + 5e5)
xlim(127492235 - 5e5, 127494789 + 5e5)+
geom_vline(xintercept = 127492235, color="red")+
geom_vline(xintercept = 127494789, color="red")
ggplot(windowFst_chr7) +
geom_line(aes(x=BIN_START, y=WEIGHTED_FST))
ggplot(windowFst_chr7) +
geom_line(aes(x=BIN_START, y=WEIGHTED_FST))+
xlim(127492235 - 5e5, 127494789 + 5e5)+
geom_vline(xintercept = 127492235, color="red")+
geom_vline(xintercept = 127494789, color="red")
ggplot(windowFst_chr7) +
geom_line(aes(x=BIN_START, y=WEIGHTED_FST))+
xlim(127492235 - 1e6, 127494789 + 1e6)+
geom_vline(xintercept = 127492235, color="red")+
geom_vline(xintercept = 127494789, color="red")
windowFst_chr7_filter <- windowFst_chr7 %>%
filter(N_VARIANTS > 10)
windowFst_chr7_filter$Zscore <- scale(windowFst_chr7_filter$WEIGHTED_FST, center = T, scale=T)
ggplot(windowFst_chr7_filter) +
geom_line(aes(x=BIN_START, y=Zscore))+
xlim(127492235 - 1e6, 127494789 + 1e6)+
geom_vline(xintercept = 127492235, color="red")+
geom_vline(xintercept = 127494789, color="red")
head(windowFst_chr7_filter)
windowFst_chr7_filter %>% filter(abs(Zscore) > 3)
FRA_pi <- read.table(file = "results/FRA_pi_10kbW5Kbstep_chr7.windowed.pi", header=T)
GER_pi <- read.table(file = "results/GER_pi_10kbW5Kbstep_chr7.windowed.pi", header=T)
ggplot(GER_pi) +
geom_line(aes(x=BIN_START, y=PI))+
xlim(127492235 - 1e6, 127494789 + 1e6)+
geom_vline(xintercept = 127492235, color="red")+
geom_vline(xintercept = 127494789, color="red")
ggplot(FRA_pi) +
geom_line(aes(x=BIN_START, y=PI))+
xlim(127492235 - 1e6, 127494789 + 1e6)+
geom_vline(xintercept = 127492235, color="red")+
geom_vline(xintercept = 127494789, color="red")
ggplot(GER_pi) +
geom_line(aes(x=BIN_START, y=PI))+
xlim(127492235 - 1e6, 127494789 + 1e6)+
geom_vline(xintercept = 127492235, color="red")+
geom_vline(xintercept = 127494789, color="red")
ggplot(FRA_pi) +
geom_line(aes(x=BIN_START, y=PI))+
xlim(127492235 - 1e6, 127494789 + 1e6)+
geom_vline(xintercept = 127492235, color="red")+
geom_vline(xintercept = 127494789, color="red")
ggplot(FRA_pi) +
geom_line(data=FRA_pi, aes(x=BIN_START, y=PI), color="purple")+
geom_line(data=GER_pi, aes(x=BIN_START, y=PI), color="blue")+
xlim(127492235 - 1e6, 127494789 + 1e6)+
geom_vline(xintercept = 127492235, color="red")+
geom_vline(xintercept = 127494789, color="red")
# Windowed pi:
FRA_pi <- read.table(file = "results/FRA_pi_10kbW5Kbstep_chr1.windowed.pi", header=T)
GER_pi <- read.table(file = "results/GER_pi_10kbW5Kbstep_chr1.windowed.pi", header=T)
ggplot() +
geom_line(data=GER_pi, aes(x=BIN_START, y=PI), color="blue")+
geom_line(data=FAR_pi, aes(x=BIN_START, y=PI), color="purple")+
xlim(94020001 - 1e6, 94055000 + 1e6)+
geom_vline(xintercept = 93966027, color="red")+
geom_vline(xintercept = 93980278, color="red")
# Windowed pi:
FRA_pi <- read.table(file = "results/FRA_pi_10kbW5Kbstep_chr1.windowed.pi", header=T)
GER_pi <- read.table(file = "results/GER_pi_10kbW5Kbstep_chr1.windowed.pi", header=T)
ggplot() +
geom_line(data=GER_pi, aes(x=BIN_START, y=PI), color="blue")+
geom_line(data=FAR_pi, aes(x=BIN_START, y=PI), color="purple")+
xlim(94020001 - 1e6, 94055000 + 1e6)+
geom_vline(xintercept = 93966027, color="red")+
geom_vline(xintercept = 93980278, color="red")
ggplot() +
geom_line(data=GER_pi, aes(x=BIN_START, y=PI), color="blue")+
geom_line(data=FRA_pi, aes(x=BIN_START, y=PI), color="purple")+
xlim(94020001 - 1e6, 94055000 + 1e6)+
geom_vline(xintercept = 93966027, color="red")+
geom_vline(xintercept = 93980278, color="red")
ggplot() +
geom_vline(xintercept = 93966027, color="red")+
geom_vline(xintercept = 93980278, color="red")+
geom_line(data=GER_pi, aes(x=BIN_START, y=PI), color="blue")+
geom_line(data=FRA_pi, aes(x=BIN_START, y=PI), color="purple")+
xlim(94020001 - 1e6, 94055000 + 1e6)
windowFst_chr1 %>% filter(WEIGHTED_FST > 0.9)
# LIBRARIES ####
library(tidyverse)
# INPUTS ####
#Define your working directory:
setwd("~/Documents/Ferreira_SU/Repositories/EvolGenomics2025/02_population_structure_analysis/04_ADMIXTURE/")
cross_validation_errors <- read.table("results/cross_validation_to_plot.txt")
cross_validation_errors <- read.table("results/cross_validation_values.txt")
names(cross_validation_errors) <- c("K", "Error")
cross_validation_errors %>%
ggplot() +
geom_point(aes(x=K, y=Error))+
geom_line(aes(x=K, y=Error))
# A file with information about each individual, including the population and alternative names
metadata <- read.table("metadata/sample_metadata.txt", header=T)
# The order of the samples in the vcf and bed files.
sample_order <- read.table("metadata/sample_order.txt")
# We read the input file name
K2_file <- "results/chr1.27indvs.QUALFilters.POPFilters.10kbSNPs.2.Q"
K2_tbl <- read.table(K2_file)
# Add a column with the names of the individuals
K2_tbl$indv<-sample_order$V1
# Add metadata to the table
K2_tbl_with_metadata <- merge(K2_tbl, metadata, by.x="indv", by.y="sample_id")
# Reorder the results by population for plotting.
K2_tbl_with_metadata <- K2_tbl_with_metadata[order(K2_tbl_with_metadata$population_code),]
# Lock the order of the individuals for plotting.
K2_tbl_with_metadata$indv <- factor(K2_tbl_with_metadata$indv, levels=K2_tbl_with_metadata$indv)
# We need to change the format of the table for easier plotting with ggplots
K2_tbl_with_metadata_long <- pivot_longer(cols=c("V1","V2"), names_to="K", values_to="admix_proportion")
head(K2_tbl_with_metadata)
# We need to change the format of the table for easier plotting with ggplots
K2_tbl_with_metadata_long <- K2_tbl_with_metadata %>% pivot_longer(cols=c("V1","V2"), names_to="K", values_to="admix_proportion")
# Plotting with ggplot:
ggplot(K2_tbl_with_metadata_long, aes(x=indv, y=admix_proportion, fill=K)) +
geom_bar(position="stack", stat="identity") +
theme_classic() +
theme(axis.title.y=element_text(size=6),
axis.text.y=element_text(size=6),
axis.text.x=element_text(size=6,angle=90, vjust=0.5, hjust=1),
axis.title.x=element_blank())
# Plotting with ggplot:
ggplot(K2_tbl_with_metadata_long, aes(x=indv, y=admix_proportion, fill=K)) +
geom_bar(position="stack", stat="identity") +
theme_classic() +
theme(axis.text.x=element_text(angle=90, vjust=0.5, hjust=1),
axis.title.x=element_blank())
plot_admixture <- function(files, sample_order, metadata, output_pdf="admixture_plots.pdf") {
# Open PDF for all plots
pdf(output_pdf, width=10, height=6)
for (f in files) {
# Read Q file
Q_tbl <- read.table(f)
# Add individuals
Q_tbl$indv <- sample_order$V1
# Merge with metadata
Q_tbl_with_metadata <- merge(Q_tbl, metadata, by.x="indv", by.y="sample_id")
# Reorder individuals by population
Q_tbl_with_metadata <- Q_tbl_with_metadata[order(Q_tbl_with_metadata$population_code), ]
Q_tbl_with_metadata$indv <- factor(Q_tbl_with_metadata$indv,
levels=Q_tbl_with_metadata$indv)
# Convert to long format
Q_tbl_long <- Q_tbl_with_metadata %>%
pivot_longer(cols = starts_with("V"),
names_to = "K",
values_to = "admix_proportion")
# Make plot
p <- ggplot(Q_tbl_long, aes(x=indv, y=admix_proportion, fill=K)) +
geom_bar(position="stack", stat="identity") +
theme_classic() +
theme(axis.text.x=element_text(angle=90, vjust=0.5, hjust=1),
axis.title.x=element_blank()) +
ggtitle(basename(f))
# Print to PDF
print(p)
}
# Close PDF
dev.off()
}
file_list <- list.files("results", pattern="*.Q", full.names=TRUE)
plot_admixture(files, sample_order, metadata, "admixture_results.pdf")
plot_admixture(file_list, sample_order, metadata, "admixture_results.pdf")
library(cowplot)
plot_admixture <- function(files, sample_order, metadata, output_pdf="admixture_plots_grid.pdf") {
plots <- list()
for (f in files) {
# Read Q file
Q_tbl <- read.table(f)
# Add individuals
Q_tbl$indv <- sample_order$V1
# Merge with metadata
Q_tbl_with_metadata <- merge(Q_tbl, metadata, by.x="indv", by.y="sample_id")
# Reorder individuals by population
Q_tbl_with_metadata <- Q_tbl_with_metadata[order(Q_tbl_with_metadata$population_code), ]
Q_tbl_with_metadata$indv <- factor(Q_tbl_with_metadata$indv,
levels=Q_tbl_with_metadata$indv)
# Convert to long format
Q_tbl_long <- Q_tbl_with_metadata %>%
pivot_longer(cols = starts_with("V"),
names_to = "K",
values_to = "admix_proportion")
# Make plot
p <- ggplot(Q_tbl_long, aes(x=indv, y=admix_proportion, fill=K)) +
geom_bar(position="stack", stat="identity") +
theme_classic() +
theme(axis.text.x=element_text(angle=90, vjust=0.5, hjust=1),
axis.title.x=element_blank()) +
ggtitle(basename(f))
plots[[f]] <- p
}
# Combine all plots in a grid
combined_plot <- plot_grid(plotlist = plots, ncol = 2)  # change ncol if you want more/less per row
# Save as PDF
ggsave(output_pdf, combined_plot, width = 16, height = 9)
}
file_list <- list.files("results", pattern="*.Q", full.names=TRUE)
plot_admixture(file_list, sample_order, metadata, "admixture_plots.pdf")
K2_plot <- ggplot(K2_tbl_with_metadata_long, aes(x=indv, y=admix_proportion, fill=K)) +
geom_bar(position="stack", stat="identity") +
theme_classic() +
theme(axis.title.y=element_text(size=6),
axis.text.y=element_text(size=6),
axis.text.x=element_text(size=6,angle=90, vjust=0.5, hjust=1),
axis.title.x=element_blank())
ggsave(K2_plot, filename="K2_plot.pdf")
ggsave(K2_plot, filename="K2_plot.pdf", width=10, height = 5)
ggsave(K2_plot, filename="K2_plot.pdf", width=7, height = 3)
