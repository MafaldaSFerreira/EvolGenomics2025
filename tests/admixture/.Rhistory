y = paste0("PC2 (", signif(pve[2], 3), "%)"))
# maf 5
eigenvec_file <- "02_results/AllMouseAUTO_SNP_ONLY_depthFilter5031_MQ30_QUAL30_SP_3_soft_filtered_20_5_reheader.miss20.biallelic.maf5.var.10kbSNPs.chr1.27indv.eigenvec"
eigenval_file <- "02_results/AllMouseAUTO_SNP_ONLY_depthFilter5031_MQ30_QUAL30_SP_3_soft_filtered_20_5_reheader.miss20.biallelic.maf5.var.10kbSNPs.chr1.27indv.eigenval"
pca <- read.table(eigenvec_file, header=F)
eigenval <- scan(eigenval_file)
# Drop nuisance first column, set names to match your code
pca <- pca[ , -1]
names(pca)[1] <- "ind"
names(pca)[2:ncol(pca)] <- paste0("PC", 1:(ncol(pca)-1))
# % variance explained
pve <- eigenval / sum(eigenval) * 100
# Merge with metadata + ensure stable factor order for colors
pca_with_info <- merge(pca, metadata, by.x = "ind", by.y = "sample_id")
p <- ggplot(pca_with_info, aes(PC1, PC2, col = population_code, shape = species)) +
geom_point(size = 2, alpha = 0.9)
p_maf5 <- p + labs(
x = paste0("PC1 (", signif(pve[1], 3), "%)"),
y = paste0("PC2 (", signif(pve[2], 3), "%)"))
gridExtra::grid.arrange(p_maf3, p_maf5)
p <- ggplot(pca_with_info, aes(PC1, PC2, col = population, shape = species)) +
geom_point(size = 2, alpha = 0.9)
# Let's add the information about the pve to each axis
p_maf3 <- p + labs(
x = paste0("PC1 (", signif(pve[1], 3), "%)"),
y = paste0("PC2 (", signif(pve[2], 3), "%)"))
p_maf3
ggsave(p_maf3, filename="figures/pca_maf3.pdf")
ggsave(p_maf5, filename="figures/pca_maf5.pdf")
# INPUTS ####
# 1. Define your working directory:
setwd("~/Documents/Ferreira_SU/Repositories/EvolGenomics2025/admixture/")
#-------------------------
# Sample info (used for all plots)
#-------------------------
metadata <- read.table("metadata/sample_metadata.txt", header=T)
#-------------------------
# Cross-validation Plot
#-------------------------
cross_validation_errors <- read.table("results/cross_validation_to_plot.txt")
head(cross_validation_errors)
names(cross_validation_errors) <- c("K", "Error")
names(cross_validation_errors)
ggplot(cross_validation_errors)
ggplot(cross_validation_errors) +
geom_point(aes(x=K, y=Error))
#-------------------------
# Cross-validation Plot
#-------------------------
cross_validation_errors <- read.table("results/cross_validation_to_plot.txt")
names(cross_validation_errors) <- c("K", "Error")
ggplot(cross_validation_errors) +
geom_point(aes(x=K, y=Error))
ggplot(cross_validation_errors) +
geom_point(aes(x=K, y=Error))+
geom_line(aes(x=K, y=Error))
cross_validation_errors %>% filter(K<=5) %>%
ggplot() +
geom_point(aes(x=K, y=Error))+
geom_line(aes(x=K, y=Error))
#-------------------------
# Admixture plots
#-------------------------
K2 <- "results/AllMouseAUTO_SNP_ONLY_depthFilter5031_MQ30_QUAL30_SP_3_soft_filtered_20_5_reheader.miss20.biallelic.maf5.var.10kbSNPs.chr1.27indv.2.Q"
#-------------------------
# Admixture plots
#-------------------------
K2_file <- "results/AllMouseAUTO_SNP_ONLY_depthFilter5031_MQ30_QUAL30_SP_3_soft_filtered_20_5_reheader.miss20.biallelic.maf5.var.10kbSNPs.chr1.27indv.2.Q"
K2_tbl <- read.table(K2)
K2_tbl <- read.table(K2_file)
head(K2_tbl)
barplot(t(as.matrix(K2_tbl)), col=rainbow(3), xlab="Individual #", ylab="Ancestry", border=NA)
barplot(t(as.matrix(K2_tbl)), col=rainbow(2), xlab="Individual #", ylab="Ancestry", border=NA)
sample_order <- scan("metadata/sample_order.txt")
sample_order <- read.table("metadata/sample_order.txt")
sample_order
rownames(K2_tbl)<-sample_order
rownames(K2_tbl)
sample_order
rownames(K2_tbl)<-sample_order$V1
K2_tbl$indv<-sample_order$V1
metadata
merge(K2_tbl, metadata, by.x="indv", by.y="sample_id")
K2_tbl_with_metadata <- merge(K2_tbl, metadata, by.x="indv", by.y="sample_id")
K2_tbl_with_metadata %>%
pivot_longer(cols=c(V1,V2)),
K2_tbl_with_metadata %>%
pivot_longer(cols=c("V1","V2")),
K2_tbl_with_metadata %>%
pivot_longer(cols=c("V1","V2"),
names_to="K", values_to="admix_proportion")
K2_tbl_with_metadata %>%
pivot_longer(cols=c("V1","V2"),
names_to="K", values_to="admix_proportion") %>%
ggplot(aes(x=V1, y=admix_proportion, fill=K)) +
geom_bar(position="stack", stat="identity")
K2_tbl_with_metadata %>%
pivot_longer(cols=c("V1","V2"),
names_to="K", values_to="admix_proportion") %>%
ggplot(aes(x=K, y=admix_proportion, fill=K)) +
geom_bar(position="stack", stat="identity")
K2_tbl_with_metadata %>%
pivot_longer(cols=c("V1","V2"),
names_to="K", values_to="admix_proportion") %>%
ggplot(aes(x=indv, y=admix_proportion, fill=K)) +
geom_bar(position="stack", stat="identity")
ylab(paste0("Ancestry (K", no, ")")) +
scale_fill_observable()+
theme_classic() +
theme(axis.title.y=element_text(size=6),
axis.text.y=element_text(size=6),
axis.text.x=element_text(size=6,angle=90),
axis.title.x=element_blank(),
legend.position="none",
axis.line.x=element_blank(),
axis.ticks.x=element_blank())
K2_tbl_with_metadata %>%
pivot_longer(cols=c("V1","V2"),
names_to="K", values_to="admix_proportion") %>%
ggplot(aes(x=indv, y=admix_proportion, fill=K)) +
geom_bar(position="stack", stat="identity") +
scale_fill_observable()+
theme_classic() +
theme(axis.title.y=element_text(size=6),
axis.text.y=element_text(size=6),
axis.text.x=element_text(size=6,angle=90),
axis.title.x=element_blank(),
legend.position="none",
axis.line.x=element_blank(),
axis.ticks.x=element_blank())
K2_tbl_with_metadata %>%
pivot_longer(cols=c("V1","V2"),
names_to="K", values_to="admix_proportion") %>%
ggplot(aes(x=indv, y=admix_proportion, fill=K)) +
geom_bar(position="stack", stat="identity") +
theme_classic() +
theme(axis.title.y=element_text(size=6),
axis.text.y=element_text(size=6),
axis.text.x=element_text(size=6,angle=90),
axis.title.x=element_blank(),
legend.position="none",
axis.line.x=element_blank(),
axis.ticks.x=element_blank())
K2_tbl_with_metadata %>%
pivot_longer(cols=c("V1","V2"),
names_to="K", values_to="admix_proportion") %>%
ggplot(aes(x=indv, y=admix_proportion, fill=K)) +
geom_bar(position="stack", stat="identity") +
theme_classic() +
theme(axis.title.y=element_text(size=6),
axis.text.y=element_text(size=6),
axis.text.x=element_text(size=6,angle=90),
axis.title.x=element_blank())
K2_tbl_with_metadata %>%
pivot_longer(cols=c("V1","V2"),
names_to="K", values_to="admix_proportion") %>%
ggplot(aes(x=indv, y=admix_proportion, fill=K)) +
geom_bar(position="stack", stat="identity") +
theme_classic() +
theme(axis.title.y=element_text(size=6),
axis.text.y=element_text(size=6),
axis.text.x=element_text(size=6,angle=90, vjust=0.5, hjust=0),
axis.title.x=element_blank())
K2_tbl_with_metadata %>%
pivot_longer(cols=c("V1","V2"),
names_to="K", values_to="admix_proportion") %>%
ggplot(aes(x=indv, y=admix_proportion, fill=K)) +
geom_bar(position="stack", stat="identity") +
theme_classic() +
theme(axis.title.y=element_text(size=6),
axis.text.y=element_text(size=6),
axis.text.x=element_text(size=6,angle=90, vjust=0.5, hjust=1),
axis.title.x=element_blank())
K2_tbl_with_metadata[order(K2_tbl_with_metadata$population_code),]
# Reorder by population
K2_tbl_with_metadata <- K2_tbl_with_metadata[order(K2_tbl_with_metadata$population_code),]
K2_tbl_with_metadata %>%
pivot_longer(cols=c("V1","V2"),
names_to="K", values_to="admix_proportion") %>%
ggplot(aes(x=indv, y=admix_proportion, fill=K)) +
geom_bar(position="stack", stat="identity") +
theme_classic() +
theme(axis.title.y=element_text(size=6),
axis.text.y=element_text(size=6),
axis.text.x=element_text(size=6,angle=90, vjust=0.5, hjust=1),
axis.title.x=element_blank())
K2_tbl_with_metadata
K2_tbl_with_metadata$indv <- factor(K2_tbl_with_metadata$indv, levels=K2_tbl_with_metadata$indv)
K2_tbl_with_metadata %>%
pivot_longer(cols=c("V1","V2"),
names_to="K", values_to="admix_proportion") %>%
ggplot(aes(x=indv, y=admix_proportion, fill=K)) +
geom_bar(position="stack", stat="identity") +
theme_classic() +
theme(axis.title.y=element_text(size=6),
axis.text.y=element_text(size=6),
axis.text.x=element_text(size=6,angle=90, vjust=0.5, hjust=1),
axis.title.x=element_blank())
#-------------------------
# Admixture plots K=3
#-------------------------
K3_file <- "results/AllMouseAUTO_SNP_ONLY_depthFilter5031_MQ30_QUAL30_SP_3_soft_filtered_20_5_reheader.miss20.biallelic.maf5.var.10kbSNPs.chr1.27indv.3.Q"
K3_tbl <- read.table(K3_file)
K3_tbl$indv<-sample_order$V1
K3_tbl_with_metadata <- merge(K3_tbl, metadata, by.x="indv", by.y="sample_id")
K3_tbl_with_metadata
# Reorder by population
K3_tbl_with_metadata <- K3_tbl_with_metadata[order(K3_tbl_with_metadata$population_code),]
K3_tbl_with_metadata
K3_tbl_with_metadata$indv <- factor(K3_tbl_with_metadata$indv, levels=K3_tbl_with_metadata$indv)
K3_tbl_with_metadata %>%
pivot_longer(cols=c("V1","V2", "V3"),
names_to="K", values_to="admix_proportion") %>%
ggplot(aes(x=indv, y=admix_proportion, fill=K)) +
geom_bar(position="stack", stat="identity") +
theme_classic() +
theme(axis.title.y=element_text(size=6),
axis.text.y=element_text(size=6),
axis.text.x=element_text(size=6,angle=90, vjust=0.5, hjust=1),
axis.title.x=element_blank())
K3
#-------------------------
# Admixture plots K=4
#-------------------------
K4_file <- "results/AllMouseAUTO_SNP_ONLY_depthFilter5031_MQ30_QUAL30_SP_3_soft_filtered_20_5_reheader.miss20.biallelic.maf5.var.10kbSNPs.chr1.27indv.4.Q"
K4_tbl <- read.table(K4_file)
K4_tbl$indv<-sample_order$V1
K4_tbl_with_metadata <- merge(K4_tbl, metadata, by.x="indv", by.y="sample_id")
# Reorder by population
K4_tbl_with_metadata <- K4_tbl_with_metadata[order(K4_tbl_with_metadata$population_code),]
K4_tbl_with_metadata$indv <- factor(K4_tbl_with_metadata$indv, levels=K4_tbl_with_metadata$indv)
K4_tbl_with_metadata %>%
pivot_longer(cols=c("V1","V2", "V3", "V4"),
names_to="K", values_to="admix_proportion") %>%
ggplot(aes(x=indv, y=admix_proportion, fill=K)) +
geom_bar(position="stack", stat="identity") +
theme_classic() +
theme(axis.title.y=element_text(size=6),
axis.text.y=element_text(size=6),
axis.text.x=element_text(size=6,angle=90, vjust=0.5, hjust=1),
axis.title.x=element_blank())
#-------------------------
# Admixture plots K=5
#-------------------------
K5_file <- "results/AllMouseAUTO_SNP_ONLY_depthFilter5031_MQ30_QUAL30_SP_3_soft_filtered_20_5_reheader.miss20.biallelic.maf5.var.10kbSNPs.chr1.27indv.5.Q"
K5_tbl <- read.table(K5_file)
K5_tbl$indv<-sample_order$V1
K5_tbl_with_metadata <- merge(K5_tbl, metadata, by.x="indv", by.y="sample_id")
# Reorder by population
K5_tbl_with_metadata <- K5_tbl_with_metadata[order(K5_tbl_with_metadata$population_code),]
K5_tbl_with_metadata$indv <- factor(K5_tbl_with_metadata$indv, levels=K5_tbl_with_metadata$indv)
K5_tbl_with_metadata %>%
pivot_longer(cols=c("V1","V2", "V3", "V4"),
names_to="K", values_to="admix_proportion") %>%
ggplot(aes(x=indv, y=admix_proportion, fill=K)) +
geom_bar(position="stack", stat="identity") +
theme_classic() +
theme(axis.title.y=element_text(size=6),
axis.text.y=element_text(size=6),
axis.text.x=element_text(size=6,angle=90, vjust=0.5, hjust=1),
axis.title.x=element_blank())
K5_tbl_with_metadata %>%
pivot_longer(cols=c("V1","V2", "V3", "V4", "V5"),
names_to="K", values_to="admix_proportion") %>%
ggplot(aes(x=indv, y=admix_proportion, fill=K)) +
geom_bar(position="stack", stat="identity") +
theme_classic() +
theme(axis.title.y=element_text(size=6),
axis.text.y=element_text(size=6),
axis.text.x=element_text(size=6,angle=90, vjust=0.5, hjust=1),
axis.title.x=element_blank())
cross_validation_errors %>% filter(K<=5) %>%
ggplot() +
geom_point(aes(x=K, y=Error))+
geom_line(aes(x=K, y=Error))
cross_validation_errors %>% #filter(K<=5) %>%
ggplot() +
geom_point(aes(x=K, y=Error))+
geom_line(aes(x=K, y=Error))
# Read CV errors
cv <- read.table("cv_errors.txt", header = FALSE)
# Read CV errors
cv <- read.table("results/cv_errors.txt", header = FALSE)
colnames(cv) <- c("K", "CVerror")
# Summarize mean & sd per K
cv_summary <- cv %>%
group_by(K) %>%
summarise(
mean_cv = mean(CVerror),
sd_cv   = sd(CVerror),
.groups = "drop"
)
print(cv_summary)
# Plot
p <- ggplot(cv_summary, aes(x = K, y = mean_cv)) +
geom_line() +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean_cv - sd_cv, ymax = mean_cv + sd_cv), width = 0.2) +
theme_minimal(base_size = 14) +
labs(
title = "ADMIXTURE cross-validation error",
x = "Number of clusters (K)",
y = "Mean CV error ± SD"
)
p
cv
library(pophelper)
install.packages("pophelper")
if(!requireNamespace("pophelper", quietly=TRUE)){
if(!requireNamespace("devtools", quietly=TRUE)) install.packages("devtools")
devtools::install_github("royfrancis/pophelper")
}
cat cv
cv
remotes::install_github('royfrancis/pophelper')
library(pophelper)
list.files(path="admixture_results/", pattern="run*.Q", recursive=TRUE, full.names=TRUE)
list.files(path="admixture_results/", pattern="*.Q", recursive=TRUE, full.names=TRUE)
list.files(path="admixture_results", pattern="*.Q", recursive=TRUE, full.names=TRUE)
qfiles <- list.files(path="admixture_results", pattern="*.Q", recursive=TRUE, full.names=TRUE)
#Read them in
slist <- readQ(qfiles)
# -------------------------
# 2. Summarize runs for each K
# -------------------------
# This will cluster replicate runs at each K and produce
# an alignment of clusters (so cluster 1 in run1 ~ cluster 1 in run2, etc.)
# You can increase rep=10 if you want more iterations of alignment
aligned <- alignK(slist, rep=5, usegrep=TRUE)
# -------------------------
# 2. Summarize runs for each K
# -------------------------
# This will cluster replicate runs at each K and produce
# an alignment of clusters (so cluster 1 in run1 ~ cluster 1 in run2, etc.)
# You can increase rep=10 if you want more iterations of alignment
aligned <- alignK(slist)
slist
slist[[1]]
length(slist)
length(qfiles)
qfiles
qfiles <- list.files(path="admixture_results", pattern="\\.Q$", recursive=TRUE, full.names=TRUE)
length(qfiles)
#Read them in
slist <- readQ(qfiles)
# -------------------------
# 2. Summarize runs for each K
# -------------------------
# This will cluster replicate runs at each K and produce
# an alignment of clusters (so cluster 1 in run1 ~ cluster 1 in run2, etc.)
# You can increase rep=10 if you want more iterations of alignment
aligned <- alignK(slist)
# -------------------------
# 2. Summarize runs for each K
# -------------------------
# This will cluster replicate runs at each K and produce
# an alignment of clusters (so cluster 1 in run1 ~ cluster 1 in run2, etc.)
# You can increase rep=10 if you want more iterations of alignment
aligned <- alignK(slist)
names(qfiles) <- gsub("./","",qfiles)
qfiles
head(qfiles)
slist
#Read them in
slist <- readQ(qfiles)
slist
# -------------------------
# 2. Summarize runs for each K
# -------------------------
# This will cluster replicate runs at each K and produce
# an alignment of clusters (so cluster 1 in run1 ~ cluster 1 in run2, etc.)
# You can increase rep=10 if you want more iterations of alignment
aligned <- alignK(slist)
qfiles <- list.files(path="admixture_results", pattern="\\.Q$", recursive=TRUE, full.names=TRUE)
names(qfiles) <- gsub("./","",qfiles)
gsub("./","",qfiles)
qfiles
qfiles <- list.files(path="admixture_results", pattern="\\.Q$", recursive=TRUE, full.names=TRUE)
qfiles
names(qfiles) <- gsub("./","",qfiles)
names(qfiles)
qfiles <- list.files(path="admixture_results", pattern="\\.Q$", recursive=TRUE, full.names=TRUE)
qfiles
qfiles <- list.files(path=".", pattern="\\.Q$", recursive=TRUE, full.names=TRUE)
names(qfiles) <- file.path(basename(dirname(qfiles)), basename(qfiles))
slist <- readQ(qfiles)
qfiles
qfiles <- list.files(path="admixture_results", pattern="\\.Q$", recursive=TRUE, full.names=TRUE)
qfiles
gsub("./","",qfiles)
qfiles
gsub("/","",qfiles)
names(qfiles) <- gsub("/","",qfiles)
#Read them in
slist <- readQ(qfiles)
# -------------------------
# 2. Summarize runs for each K
# -------------------------
# This will cluster replicate runs at each K and produce
# an alignment of clusters (so cluster 1 in run1 ~ cluster 1 in run2, etc.)
# You can increase rep=10 if you want more iterations of alignment
aligned <- alignK(slist)
slist
names(qfiles)
qfiles <- list.files(path="admixture_results", pattern="\\.Q$", recursive=TRUE, full.names=TRUE)
mode(qfiles)
qfiles
#Read them in
slist <- readQ(qfiles)
slist
names(qfiles) <- gsub("/","",qfiles)
#Read them in
slist <- readQ(qfiles)
slist
names(qfiles)
as.qlist(slist, uniquenames=TRUE)
?as.qlist
as.qlist(slist)
slist <- as.qlist(slist)
# -------------------------
# 2. Summarize runs for each K
# -------------------------
# This will cluster replicate runs at each K and produce
# an alignment of clusters (so cluster 1 in run1 ~ cluster 1 in run2, etc.)
# You can increase rep=10 if you want more iterations of alignment
aligned <- alignK(slist)
names(slist)
names(slist) <- gsub("/","",qfiles)
# -------------------------
# 2. Summarize runs for each K
# -------------------------
# This will cluster replicate runs at each K and produce
# an alignment of clusters (so cluster 1 in run1 ~ cluster 1 in run2, etc.)
# You can increase rep=10 if you want more iterations of alignment
aligned <- alignK(slist, )
# -------------------------
# 2. Summarize runs for each K
# -------------------------
# This will cluster replicate runs at each K and produce
# an alignment of clusters (so cluster 1 in run1 ~ cluster 1 in run2, etc.)
# You can increase rep=10 if you want more iterations of alignment
aligned <- alignK(slist )
aligned
pdf("admixture_barplots.pdf", width=10, height=5)
for(k in sort(unique(sapply(slist, function(x) ncol(x))))){
plist <- aligned[[paste0("K",k)]]
if(!is.null(plist)){
plotQ(plist,
showindlab=FALSE,
sortind="all",   # sorts individuals within each cluster
exportpath=NULL, # don’t auto-save PNGs, we’re inside pdf()
imgtype="pdf")
}
}
dev.off()
aligned
plotQ(aligned)
plotQ(aligned[c(1)])
plotQ(aligned[c(1)], exportplot = F)
plotQ(aligned[c(1)], exportplot = F, returnplot = T)
plotQ(aligned[c(2)], exportplot = F, returnplot = T)
plotQ(aligned[c(11)], exportplot = F, returnplot = T)
sortQ(slist)
#-------------------------
# Cross-validation Plot
#-------------------------
cross_validation_errors <- read.table("results/cross_validation_to_plot.txt")
names(cross_validation_errors) <- c("K", "Error")
cross_validation_errors %>% #filter(K<=5) %>%
ggplot() +
geom_point(aes(x=K, y=Error))+
geom_line(aes(x=K, y=Error))
#-------------------------
# Admixture plots K=3
#-------------------------
K3_file <- "results/AllMouseAUTO_SNP_ONLY_depthFilter5031_MQ30_QUAL30_SP_3_soft_filtered_20_5_reheader.miss20.biallelic.maf5.var.10kbSNPs.chr1.27indv.3.Q"
K3_tbl <- read.table(K3_file)
K3_tbl$indv<-sample_order$V1
K3_tbl_with_metadata <- merge(K3_tbl, metadata, by.x="indv", by.y="sample_id")
# Reorder by population
K3_tbl_with_metadata <- K3_tbl_with_metadata[order(K3_tbl_with_metadata$population_code),]
K3_tbl_with_metadata$indv <- factor(K3_tbl_with_metadata$indv, levels=K3_tbl_with_metadata$indv)
K3_tbl_with_metadata %>%
pivot_longer(cols=c("V1","V2", "V3"),
names_to="K", values_to="admix_proportion") %>%
ggplot(aes(x=indv, y=admix_proportion, fill=K)) +
geom_bar(position="stack", stat="identity") +
theme_classic() +
theme(axis.title.y=element_text(size=6),
axis.text.y=element_text(size=6),
axis.text.x=element_text(size=6,angle=90, vjust=0.5, hjust=1),
axis.title.x=element_blank())
#-------------------------
# Admixture plots K=4
#-------------------------
K4_file <- "results/AllMouseAUTO_SNP_ONLY_depthFilter5031_MQ30_QUAL30_SP_3_soft_filtered_20_5_reheader.miss20.biallelic.maf5.var.10kbSNPs.chr1.27indv.4.Q"
K4_tbl <- read.table(K4_file)
K4_tbl$indv<-sample_order$V1
K4_tbl_with_metadata <- merge(K4_tbl, metadata, by.x="indv", by.y="sample_id")
# Reorder by population
K4_tbl_with_metadata <- K4_tbl_with_metadata[order(K4_tbl_with_metadata$population_code),]
K4_tbl_with_metadata$indv <- factor(K4_tbl_with_metadata$indv, levels=K4_tbl_with_metadata$indv)
K4_tbl_with_metadata %>%
pivot_longer(cols=c("V1","V2", "V3", "V4"),
names_to="K", values_to="admix_proportion") %>%
ggplot(aes(x=indv, y=admix_proportion, fill=K)) +
geom_bar(position="stack", stat="identity") +
theme_classic() +
theme(axis.title.y=element_text(size=6),
axis.text.y=element_text(size=6),
axis.text.x=element_text(size=6,angle=90, vjust=0.5, hjust=1),
axis.title.x=element_blank())
